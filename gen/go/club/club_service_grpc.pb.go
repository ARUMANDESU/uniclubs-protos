// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: club/club_service.proto

package uniclubs_club_service_v1_clubv1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubClient is the client API for Club service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubClient interface {
	CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	HandleNewClub(ctx context.Context, in *HandleNewClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetClub(ctx context.Context, in *GetClubRequest, opts ...grpc.CallOption) (*ClubObject, error)
	ListClubs(ctx context.Context, in *ListClubRequest, opts ...grpc.CallOption) (*ListClubResponse, error)
	ListNotApprovedClubs(ctx context.Context, in *ListNotApprovedClubsRequest, opts ...grpc.CallOption) (*ListNotApprovedClubsResponse, error)
	RequestToJoinClub(ctx context.Context, in *RequestToJoinClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	HandleJoinClub(ctx context.Context, in *HandleJoinClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeactivateClub(ctx context.Context, in *DeactivateClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*ClubObject, error)
	GetUserClubs(ctx context.Context, in *GetUserClubsRequest, opts ...grpc.CallOption) (*GetUserClubsResponse, error)
	GetClubMember(ctx context.Context, in *GetClubMemberRequest, opts ...grpc.CallOption) (*UserObject, error)
	GetJoinStatus(ctx context.Context, in *GetJoinStatusRequest, opts ...grpc.CallOption) (*GetJoinStatusResponse, error)
	ListClubMembers(ctx context.Context, in *ListClubMembersRequest, opts ...grpc.CallOption) (*ListClubMembersResponse, error)
	ListMembershipRequests(ctx context.Context, in *ListMembershipRequestsRequest, opts ...grpc.CallOption) (*ListMembershipRequestsResponse, error)
	LeaveClub(ctx context.Context, in *LeaveClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateLogo(ctx context.Context, in *UpdateLogoRequest, opts ...grpc.CallOption) (*UpdateLogoResponse, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResponse, error)
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error)
	ChangeRolesPosition(ctx context.Context, in *ChangeRolesPositionRequest, opts ...grpc.CallOption) (*ChangeRolesPositionResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddRoleMembers(ctx context.Context, in *AddRoleMembersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveRoleMembers(ctx context.Context, in *RemoveRoleMembersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	KickMemberFromClub(ctx context.Context, in *KickMemberFromClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BanMemberFromClub(ctx context.Context, in *BanMemberFromClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UnbanUserFromClub(ctx context.Context, in *UnbanUserFromClubRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListBannedUsers(ctx context.Context, in *ListBannedUsersRequest, opts ...grpc.CallOption) (*ListBannedUsersResponse, error)
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type clubClient struct {
	cc grpc.ClientConnInterface
}

func NewClubClient(cc grpc.ClientConnInterface) ClubClient {
	return &clubClient{cc}
}

func (c *clubClient) CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/CreateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) HandleNewClub(ctx context.Context, in *HandleNewClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/HandleNewClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetClub(ctx context.Context, in *GetClubRequest, opts ...grpc.CallOption) (*ClubObject, error) {
	out := new(ClubObject)
	err := c.cc.Invoke(ctx, "/club.Club/GetClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ListClubs(ctx context.Context, in *ListClubRequest, opts ...grpc.CallOption) (*ListClubResponse, error) {
	out := new(ListClubResponse)
	err := c.cc.Invoke(ctx, "/club.Club/ListClubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ListNotApprovedClubs(ctx context.Context, in *ListNotApprovedClubsRequest, opts ...grpc.CallOption) (*ListNotApprovedClubsResponse, error) {
	out := new(ListNotApprovedClubsResponse)
	err := c.cc.Invoke(ctx, "/club.Club/ListNotApprovedClubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) RequestToJoinClub(ctx context.Context, in *RequestToJoinClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/RequestToJoinClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) HandleJoinClub(ctx context.Context, in *HandleJoinClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/HandleJoinClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) DeactivateClub(ctx context.Context, in *DeactivateClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/DeactivateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*ClubObject, error) {
	out := new(ClubObject)
	err := c.cc.Invoke(ctx, "/club.Club/UpdateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetUserClubs(ctx context.Context, in *GetUserClubsRequest, opts ...grpc.CallOption) (*GetUserClubsResponse, error) {
	out := new(GetUserClubsResponse)
	err := c.cc.Invoke(ctx, "/club.Club/GetUserClubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetClubMember(ctx context.Context, in *GetClubMemberRequest, opts ...grpc.CallOption) (*UserObject, error) {
	out := new(UserObject)
	err := c.cc.Invoke(ctx, "/club.Club/GetClubMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetJoinStatus(ctx context.Context, in *GetJoinStatusRequest, opts ...grpc.CallOption) (*GetJoinStatusResponse, error) {
	out := new(GetJoinStatusResponse)
	err := c.cc.Invoke(ctx, "/club.Club/GetJoinStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ListClubMembers(ctx context.Context, in *ListClubMembersRequest, opts ...grpc.CallOption) (*ListClubMembersResponse, error) {
	out := new(ListClubMembersResponse)
	err := c.cc.Invoke(ctx, "/club.Club/ListClubMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ListMembershipRequests(ctx context.Context, in *ListMembershipRequestsRequest, opts ...grpc.CallOption) (*ListMembershipRequestsResponse, error) {
	out := new(ListMembershipRequestsResponse)
	err := c.cc.Invoke(ctx, "/club.Club/ListMembershipRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) LeaveClub(ctx context.Context, in *LeaveClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/LeaveClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) UpdateLogo(ctx context.Context, in *UpdateLogoRequest, opts ...grpc.CallOption) (*UpdateLogoResponse, error) {
	out := new(UpdateLogoResponse)
	err := c.cc.Invoke(ctx, "/club.Club/UpdateLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*UpdateBannerResponse, error) {
	out := new(UpdateBannerResponse)
	err := c.cc.Invoke(ctx, "/club.Club/UpdateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, "/club.Club/GetUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/club.Club/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/club.Club/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ChangeRolesPosition(ctx context.Context, in *ChangeRolesPositionRequest, opts ...grpc.CallOption) (*ChangeRolesPositionResponse, error) {
	out := new(ChangeRolesPositionResponse)
	err := c.cc.Invoke(ctx, "/club.Club/ChangeRolesPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) AddRoleMembers(ctx context.Context, in *AddRoleMembersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/AddRoleMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) RemoveRoleMembers(ctx context.Context, in *RemoveRoleMembersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/RemoveRoleMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) KickMemberFromClub(ctx context.Context, in *KickMemberFromClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/KickMemberFromClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) BanMemberFromClub(ctx context.Context, in *BanMemberFromClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/BanMemberFromClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) UnbanUserFromClub(ctx context.Context, in *UnbanUserFromClubRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/UnbanUserFromClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) ListBannedUsers(ctx context.Context, in *ListBannedUsersRequest, opts ...grpc.CallOption) (*ListBannedUsersResponse, error) {
	out := new(ListBannedUsersResponse)
	err := c.cc.Invoke(ctx, "/club.Club/ListBannedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/club.Club/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubServer is the server API for Club service.
// All implementations must embed UnimplementedClubServer
// for forward compatibility
type ClubServer interface {
	CreateClub(context.Context, *CreateClubRequest) (*empty.Empty, error)
	HandleNewClub(context.Context, *HandleNewClubRequest) (*empty.Empty, error)
	GetClub(context.Context, *GetClubRequest) (*ClubObject, error)
	ListClubs(context.Context, *ListClubRequest) (*ListClubResponse, error)
	ListNotApprovedClubs(context.Context, *ListNotApprovedClubsRequest) (*ListNotApprovedClubsResponse, error)
	RequestToJoinClub(context.Context, *RequestToJoinClubRequest) (*empty.Empty, error)
	HandleJoinClub(context.Context, *HandleJoinClubRequest) (*empty.Empty, error)
	DeactivateClub(context.Context, *DeactivateClubRequest) (*empty.Empty, error)
	UpdateClub(context.Context, *UpdateClubRequest) (*ClubObject, error)
	GetUserClubs(context.Context, *GetUserClubsRequest) (*GetUserClubsResponse, error)
	GetClubMember(context.Context, *GetClubMemberRequest) (*UserObject, error)
	GetJoinStatus(context.Context, *GetJoinStatusRequest) (*GetJoinStatusResponse, error)
	ListClubMembers(context.Context, *ListClubMembersRequest) (*ListClubMembersResponse, error)
	ListMembershipRequests(context.Context, *ListMembershipRequestsRequest) (*ListMembershipRequestsResponse, error)
	LeaveClub(context.Context, *LeaveClubRequest) (*empty.Empty, error)
	UpdateLogo(context.Context, *UpdateLogoRequest) (*UpdateLogoResponse, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerResponse, error)
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*Role, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error)
	ChangeRolesPosition(context.Context, *ChangeRolesPositionRequest) (*ChangeRolesPositionResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*empty.Empty, error)
	AddRoleMembers(context.Context, *AddRoleMembersRequest) (*empty.Empty, error)
	RemoveRoleMembers(context.Context, *RemoveRoleMembersRequest) (*empty.Empty, error)
	KickMemberFromClub(context.Context, *KickMemberFromClubRequest) (*empty.Empty, error)
	BanMemberFromClub(context.Context, *BanMemberFromClubRequest) (*empty.Empty, error)
	UnbanUserFromClub(context.Context, *UnbanUserFromClubRequest) (*empty.Empty, error)
	ListBannedUsers(context.Context, *ListBannedUsersRequest) (*ListBannedUsersResponse, error)
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*empty.Empty, error)
	mustEmbedUnimplementedClubServer()
}

// UnimplementedClubServer must be embedded to have forward compatible implementations.
type UnimplementedClubServer struct {
}

func (UnimplementedClubServer) CreateClub(context.Context, *CreateClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClub not implemented")
}
func (UnimplementedClubServer) HandleNewClub(context.Context, *HandleNewClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleNewClub not implemented")
}
func (UnimplementedClubServer) GetClub(context.Context, *GetClubRequest) (*ClubObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClub not implemented")
}
func (UnimplementedClubServer) ListClubs(context.Context, *ListClubRequest) (*ListClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClubs not implemented")
}
func (UnimplementedClubServer) ListNotApprovedClubs(context.Context, *ListNotApprovedClubsRequest) (*ListNotApprovedClubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotApprovedClubs not implemented")
}
func (UnimplementedClubServer) RequestToJoinClub(context.Context, *RequestToJoinClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToJoinClub not implemented")
}
func (UnimplementedClubServer) HandleJoinClub(context.Context, *HandleJoinClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleJoinClub not implemented")
}
func (UnimplementedClubServer) DeactivateClub(context.Context, *DeactivateClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateClub not implemented")
}
func (UnimplementedClubServer) UpdateClub(context.Context, *UpdateClubRequest) (*ClubObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClub not implemented")
}
func (UnimplementedClubServer) GetUserClubs(context.Context, *GetUserClubsRequest) (*GetUserClubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserClubs not implemented")
}
func (UnimplementedClubServer) GetClubMember(context.Context, *GetClubMemberRequest) (*UserObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClubMember not implemented")
}
func (UnimplementedClubServer) GetJoinStatus(context.Context, *GetJoinStatusRequest) (*GetJoinStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinStatus not implemented")
}
func (UnimplementedClubServer) ListClubMembers(context.Context, *ListClubMembersRequest) (*ListClubMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClubMembers not implemented")
}
func (UnimplementedClubServer) ListMembershipRequests(context.Context, *ListMembershipRequestsRequest) (*ListMembershipRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembershipRequests not implemented")
}
func (UnimplementedClubServer) LeaveClub(context.Context, *LeaveClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveClub not implemented")
}
func (UnimplementedClubServer) UpdateLogo(context.Context, *UpdateLogoRequest) (*UpdateLogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogo not implemented")
}
func (UnimplementedClubServer) UpdateBanner(context.Context, *UpdateBannerRequest) (*UpdateBannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedClubServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedClubServer) CreateRole(context.Context, *CreateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedClubServer) UpdateRole(context.Context, *UpdateRoleRequest) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedClubServer) ChangeRolesPosition(context.Context, *ChangeRolesPositionRequest) (*ChangeRolesPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRolesPosition not implemented")
}
func (UnimplementedClubServer) DeleteRole(context.Context, *DeleteRoleRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedClubServer) AddRoleMembers(context.Context, *AddRoleMembersRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleMembers not implemented")
}
func (UnimplementedClubServer) RemoveRoleMembers(context.Context, *RemoveRoleMembersRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoleMembers not implemented")
}
func (UnimplementedClubServer) KickMemberFromClub(context.Context, *KickMemberFromClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickMemberFromClub not implemented")
}
func (UnimplementedClubServer) BanMemberFromClub(context.Context, *BanMemberFromClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanMemberFromClub not implemented")
}
func (UnimplementedClubServer) UnbanUserFromClub(context.Context, *UnbanUserFromClubRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbanUserFromClub not implemented")
}
func (UnimplementedClubServer) ListBannedUsers(context.Context, *ListBannedUsersRequest) (*ListBannedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBannedUsers not implemented")
}
func (UnimplementedClubServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (UnimplementedClubServer) mustEmbedUnimplementedClubServer() {}

// UnsafeClubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubServer will
// result in compilation errors.
type UnsafeClubServer interface {
	mustEmbedUnimplementedClubServer()
}

func RegisterClubServer(s grpc.ServiceRegistrar, srv ClubServer) {
	s.RegisterService(&Club_ServiceDesc, srv)
}

func _Club_CreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/CreateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CreateClub(ctx, req.(*CreateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_HandleNewClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleNewClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).HandleNewClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/HandleNewClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).HandleNewClub(ctx, req.(*HandleNewClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/GetClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetClub(ctx, req.(*GetClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ListClubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ListClubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/ListClubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ListClubs(ctx, req.(*ListClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ListNotApprovedClubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotApprovedClubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ListNotApprovedClubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/ListNotApprovedClubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ListNotApprovedClubs(ctx, req.(*ListNotApprovedClubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_RequestToJoinClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestToJoinClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).RequestToJoinClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/RequestToJoinClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).RequestToJoinClub(ctx, req.(*RequestToJoinClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_HandleJoinClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleJoinClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).HandleJoinClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/HandleJoinClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).HandleJoinClub(ctx, req.(*HandleJoinClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_DeactivateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).DeactivateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/DeactivateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).DeactivateClub(ctx, req.(*DeactivateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_UpdateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).UpdateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/UpdateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).UpdateClub(ctx, req.(*UpdateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetUserClubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserClubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetUserClubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/GetUserClubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetUserClubs(ctx, req.(*GetUserClubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetClubMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClubMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetClubMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/GetClubMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetClubMember(ctx, req.(*GetClubMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetJoinStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetJoinStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/GetJoinStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetJoinStatus(ctx, req.(*GetJoinStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ListClubMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClubMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ListClubMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/ListClubMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ListClubMembers(ctx, req.(*ListClubMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ListMembershipRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembershipRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ListMembershipRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/ListMembershipRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ListMembershipRequests(ctx, req.(*ListMembershipRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_LeaveClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).LeaveClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/LeaveClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).LeaveClub(ctx, req.(*LeaveClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_UpdateLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).UpdateLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/UpdateLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).UpdateLogo(ctx, req.(*UpdateLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/UpdateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).UpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/GetUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ChangeRolesPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRolesPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ChangeRolesPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/ChangeRolesPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ChangeRolesPosition(ctx, req.(*ChangeRolesPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_AddRoleMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).AddRoleMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/AddRoleMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).AddRoleMembers(ctx, req.(*AddRoleMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_RemoveRoleMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoleMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).RemoveRoleMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/RemoveRoleMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).RemoveRoleMembers(ctx, req.(*RemoveRoleMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_KickMemberFromClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickMemberFromClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).KickMemberFromClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/KickMemberFromClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).KickMemberFromClub(ctx, req.(*KickMemberFromClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_BanMemberFromClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanMemberFromClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).BanMemberFromClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/BanMemberFromClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).BanMemberFromClub(ctx, req.(*BanMemberFromClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_UnbanUserFromClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanUserFromClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).UnbanUserFromClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/UnbanUserFromClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).UnbanUserFromClub(ctx, req.(*UnbanUserFromClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_ListBannedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).ListBannedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/ListBannedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).ListBannedUsers(ctx, req.(*ListBannedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Club_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.Club/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Club_ServiceDesc is the grpc.ServiceDesc for Club service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Club_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.Club",
	HandlerType: (*ClubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClub",
			Handler:    _Club_CreateClub_Handler,
		},
		{
			MethodName: "HandleNewClub",
			Handler:    _Club_HandleNewClub_Handler,
		},
		{
			MethodName: "GetClub",
			Handler:    _Club_GetClub_Handler,
		},
		{
			MethodName: "ListClubs",
			Handler:    _Club_ListClubs_Handler,
		},
		{
			MethodName: "ListNotApprovedClubs",
			Handler:    _Club_ListNotApprovedClubs_Handler,
		},
		{
			MethodName: "RequestToJoinClub",
			Handler:    _Club_RequestToJoinClub_Handler,
		},
		{
			MethodName: "HandleJoinClub",
			Handler:    _Club_HandleJoinClub_Handler,
		},
		{
			MethodName: "DeactivateClub",
			Handler:    _Club_DeactivateClub_Handler,
		},
		{
			MethodName: "UpdateClub",
			Handler:    _Club_UpdateClub_Handler,
		},
		{
			MethodName: "GetUserClubs",
			Handler:    _Club_GetUserClubs_Handler,
		},
		{
			MethodName: "GetClubMember",
			Handler:    _Club_GetClubMember_Handler,
		},
		{
			MethodName: "GetJoinStatus",
			Handler:    _Club_GetJoinStatus_Handler,
		},
		{
			MethodName: "ListClubMembers",
			Handler:    _Club_ListClubMembers_Handler,
		},
		{
			MethodName: "ListMembershipRequests",
			Handler:    _Club_ListMembershipRequests_Handler,
		},
		{
			MethodName: "LeaveClub",
			Handler:    _Club_LeaveClub_Handler,
		},
		{
			MethodName: "UpdateLogo",
			Handler:    _Club_UpdateLogo_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _Club_UpdateBanner_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _Club_GetUserRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Club_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Club_UpdateRole_Handler,
		},
		{
			MethodName: "ChangeRolesPosition",
			Handler:    _Club_ChangeRolesPosition_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Club_DeleteRole_Handler,
		},
		{
			MethodName: "AddRoleMembers",
			Handler:    _Club_AddRoleMembers_Handler,
		},
		{
			MethodName: "RemoveRoleMembers",
			Handler:    _Club_RemoveRoleMembers_Handler,
		},
		{
			MethodName: "KickMemberFromClub",
			Handler:    _Club_KickMemberFromClub_Handler,
		},
		{
			MethodName: "BanMemberFromClub",
			Handler:    _Club_BanMemberFromClub_Handler,
		},
		{
			MethodName: "UnbanUserFromClub",
			Handler:    _Club_UnbanUserFromClub_Handler,
		},
		{
			MethodName: "ListBannedUsers",
			Handler:    _Club_ListBannedUsers_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Club_TransferOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club/club_service.proto",
}
